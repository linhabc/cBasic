#include <stdio.h>
#include <stdlib.h>
#include <stdio_ext.h> //using _fpurge(stdin);

typedef int elementtype;

typedef struct node node;
struct node{
  elementtype element;
  node* prev;
  node* next;
};

typedef struct{
  node* head;
  node* tail;
  node* cur;
} doubleL;

// prototype functions
void init_list(doubleL *list);
node *makeNewNode(elementtype* addr);
elementtype* readNode();
void displayNode(node *node_addr);
void transversingList(doubleL *list);
void insertAtHead(elementtype *addr, doubleL *list);
void insertAfterCur(elementtype *addr, doubleL *list);

int main(){
  doubleL list;
  init_list(&list);
  insertAfterCur(readNode(), &list);
  //insertAtHead(readNode(), &list);
  insertAfterCur(readNode(), &list);
  insertAfterCur(readNode(), &list);
  insertAfterCur(readNode(), &list);
  insertAfterCur(readNode(), &list);
  insertAfterCur(readNode(), &list);

  transversingList(&list);
  return 0;
}

int isEmpty(doubleL *list){
  return (list->head==NULL);
}


void init_list(doubleL *list){
  list->head = NULL;
  list->tail= NULL;
  list->cur = NULL;
  return;
}

node *makeNewNode(elementtype* addr){
  node *new = (node*)malloc(sizeof(node));
  new->element = *addr;
  new->next=NULL;
  new->prev=NULL;
  return new;
}

elementtype* readNode(){
  elementtype *addr=(elementtype*)malloc(sizeof(elementtype));
  printf("Enter : ");
  scanf(" %d", addr);
  return addr;
}

void displayNode(node *node_addr){
  if(node_addr==NULL){
    printf("Error NULL pointer.\n");
    return;
  }
  printf("%d ", node_addr->element);
  return;
}

void transversingList(doubleL *list){
  if(list->head==NULL){
    printf("Empty list\n");
  }
  
  node *p;
  for(p=list->head;p!=NULL;p=p->next)
    displayNode(p);
  printf("\n");
  return;
}


void insertAtHead(elementtype *addr, doubleL *list){
  node* new = makeNewNode(addr);
  if(list->head==NULL){
    list->head = new;
    list->cur = list->head;
    return;
  }else{
    new->next = list->head;
    list->head->prev = new;
    list->head = new;
    list->cur = list->head;
    return;
  }
}

void insertAfterCur(elementtype *addr, doubleL *list){
  node* new = makeNewNode(addr);
  if(list->head == NULL){
    list->head = new;
    list->cur = list->head;
  }else if(list->cur->next == NULL){
    list->cur->next=new;
    new->prev=list->cur;
    list->cur=new;
  }else{
    new->next=list->cur->next;
    new->next->prev = new;
    list->cur->next = new;
    new->prev = list->cur;
    list->cur = list->cur->next;
  }
}

node insertAtPosition(doubleL *list, int n){


}
